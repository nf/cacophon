#!/bin/bash 

set -e

shift
COMMAND=$1
shift
DOCKER_HOST=${DOCKER_HOST:?"DOCKER_HOST not defined"}
VMRUNTIME_BASE_IMAGE=${VMRUNTIME_BASE_IMAGE:?"VMRUNTIME_BASE_IMAGE not defined"}

get_app_env()
{
    APP_DIR=$(readlink -f ${APP_DIR:-$(pwd)})
    APP_DIR=${APP_DIR/\/demo/}
    APP_ID=$(sed -n 's/application: //p' ${APP_DIR}/app.yaml)
    MODULE=$(sed -n 's/module: //p' ${APP_DIR}/app.yaml)
    RUNTIME=$(sed -n 's/runtime: //p' ${APP_DIR}/app.yaml)
    AUTHOR=$(whoami)
    IMAGE=${AUTHOR}/${APP_ID}-${MODULE}
}

case "${COMMAND}" in
"init")
        docker pull ${VMRUNTIME_BASE_IMAGE}
        docker tag ${VMRUNTIME_BASE_IMAGE} private/vmruntime-base
        docker tag ${VMRUNTIME_BASE_IMAGE} private/vmruntime-go
        ;;
"run")
        APP_DIRS=""
        for APP_DIR in "$@"
        do
            get_app_env
            APP_DIRS="${APP_DIRS} ${APP_DIR}"
            if [ "$RUNTIME" == "go" ]; then
                echo "[gcloud] module '$MODULE' build: started"
                (cd ${APP_DIR} && ~/go_appengine/goapp build -tags appengine -o _go_app.bin .)
                echo "[gcloud] module '$MODULE' build: done"
            fi
            echo "[gcloud] container '$IMAGE' creation: started"
            docker build -q --rm=true -t ${IMAGE} ${APP_DIR} > /dev/null 2>&1
            echo "[gcloud] container '$IMAGE' creation: done"
        done
        ~/go_appengine/dev_appserver.py --skip_sdk_update_check  --docker_daemon_url=tcp://172.17.42.1:4243 --api_host=172.17.42.1 --api_port=51515 ${APP_DIRS} 2>&1 | sed -n -e "s/INFO.*module \(.*\) started on port \(.*\)/[gcloud] module '\1' started on http:\/\/localhost:\2/p"
        ;;
    "deploy")
        get_app_env
        echo "deploy"
        ;;
"")
        echo "usage: gcloud <init | run | deploy> [directory]" 
        ;;
esac
